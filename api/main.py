from fastapi import FastAPI, HTTPException
from utils.modules import generative, query_endpoint,summary_prompt

app = FastAPI()



@app.get("/generate_summary/")
def summary_generator(prompt: str, model: str = "deepseek-ai/DeepSeek-R1"):
    """
    Endpoint to generate a response using the Together API with retry logic.

    Args:
        prompt (str): The input prompt.
        model (str): The model name (default: deepseek-ai/DeepSeek-R1).

    Returns:
        str: The model's response.
    """
    try:
        response = generative(summary_prompt(prompt), model)
        if response is None:
            raise HTTPException(status_code=500, detail="Unable to get a response from the model.")
        return response
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/generate/")
def generate_response(prompt: str, model: str = "deepseek-ai/DeepSeek-R1"):
    """
    Endpoint to generate a response using the Together API with retry logic.

    Args:
        prompt (str): The input prompt.
        model (str): The model name (default: deepseek-ai/DeepSeek-R1).

    Returns:
        str: The model's response.
    """
    try:
        response = generative(prompt, model)
        if response is None:
            raise HTTPException(status_code=500, detail="Unable to get a response from the model.")
        return response
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/query/")
async def query(query: str):
    """
    Endpoint to handle query requests.

    Args:
        query (str): The input query.

    Returns:
        dict: The responses generated by the query endpoint.
    """
    try:
        response = await query_endpoint(query)
        return response
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
